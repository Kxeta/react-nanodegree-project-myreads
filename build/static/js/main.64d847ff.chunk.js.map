{"version":3,"sources":["BooksAPI.js","components/BookListItem.js","components/BookShelf.js","containers/MyReads.js","containers/Search.js","containers/BookDetails.js","containers/PageNotFound.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","book","shelf","fetch","concat","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","then","res","json","search","query","data","books","BookListItem","props","updateShelf","react_default","a","createElement","className","Link","to","style","width","height","backgroundImage","imageLinks","smallThumbnail","value","onChange","e","newShelf","target","disabled","title","authors","Array","map","author","key","BookShelf","components_BookListItem","withRouter","type","components_BookShelf","filter","onClick","history","push","Search","state","changeShelfHandler","_this","setState","prevState","toConsumableArray","bookI","onChangeHandler","trim","length","BooksAPI","updateBooksState","onSearchSubmit","preventDefault","booksResult","existingBook","bookOwn","_this2","this","onSubmit","lib","minLength","debounceTimeout","placeholder","name","Component","BookDetails","loading","bookId","match","params","_this3","_this$state","description","averageRating","PageNotFound","BooksApp","Switch","Route","exact","path","render","containers_MyReads","containers_Search","containers_BookDetails","component","React","ReactDOM","BrowserRouter","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.64d847ff.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nconst BookListItem = props => {\n  const { book, updateShelf } = props;\n\n  const onChangeShelf = e => {\n    const newShelf = e.target.value;\n    updateShelf(book, newShelf);\n  };\n\n  return (\n    <div className=\"book\">\n      <div className=\"book-top\">\n        <Link to={`/book/${book.id}`}>\n          <div\n            className=\"book-cover\"\n            style={{\n              width: 128,\n              height: 193,\n              backgroundImage: `url(${book.imageLinks &&\n                book.imageLinks.smallThumbnail})`,\n            }}\n          />\n        </Link>\n        <div className=\"book-shelf-changer\">\n          <select value={book.shelf || 'none'} onChange={onChangeShelf}>\n            <option value=\"move\" disabled>\n              Move to...\n            </option>\n            <option value=\"currentlyReading\">Currently Reading</option>\n            <option value=\"wantToRead\">Want to Read</option>\n            <option value=\"read\">Read</option>\n            <option value=\"none\">None</option>\n          </select>\n        </div>\n      </div>\n      <div className=\"book-title\">{book.title}</div>\n      <div className=\"book-authors\">\n        {book.authors && book.authors instanceof Array ? (\n          book.authors.map((author, key) => <p key={key}>{author}</p>)\n        ) : (\n          <p>{book.authors}</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nBookListItem.propTypes = {\n  updateShelf: PropTypes.func,\n  book: PropTypes.object,\n};\n\nexport default BookListItem;\n","import React from 'react';\nimport BookListItem from './BookListItem';\nimport { PropTypes } from 'prop-types';\n\nconst BookShelf = props => {\n  return (\n    <div className=\"bookshelf\">\n      <h2 className=\"bookshelf-title\">{props.title}</h2>\n      <div className=\"bookshelf-books\">\n        <ol className=\"books-grid\">\n          {props.books &&\n            props.books.map((book, key) => (\n              <li key={key}>\n                <BookListItem book={book} updateShelf={props.updateShelf} />\n              </li>\n            ))}\n        </ol>\n      </div>\n    </div>\n  );\n};\n\nBookShelf.propTypes = {\n  updateShelf: PropTypes.func,\n  book: PropTypes.object,\n};\n\nexport default BookShelf;\n","import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { BookShelf } from '../components';\nimport { withRouter } from 'react-router-dom';\n\nconst MyReads = props => {\n  const shelves = [\n    {\n      type: 'currentlyReading',\n      title: 'Current Reading',\n    },\n    {\n      type: 'wantToRead',\n      title: 'Want To Read',\n    },\n    {\n      type: 'read',\n      title: 'Read',\n    },\n  ];\n  return (\n    <div className=\"list-books\">\n      <div className=\"list-books-title\">\n        <h1>MyReads</h1>\n      </div>\n      <div className=\"list-books-content\">\n        <div>\n          {props.books ? (\n            shelves.map((shelf, key) => (\n              <BookShelf\n                key={key}\n                title={shelf.title}\n                books={props.books.filter(book => book.shelf === shelf.type)}\n                updateShelf={props.updateShelf}\n              />\n            ))\n          ) : (\n            <h2>Your shelves are empty =(</h2>\n          )}\n        </div>\n      </div>\n      <div className=\"open-search\">\n        <button onClick={() => props.history.push('/search')}>\n          Add a book\n        </button>\n      </div>\n    </div>\n  );\n};\n\nMyReads.propTypes = {\n  history: PropTypes.object,\n  updateShelf: PropTypes.func,\n  books: PropTypes.array,\n};\n\nexport default withRouter(MyReads);\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { DebounceInput } from 'react-debounce-input';\nimport * as BooksAPI from '../BooksAPI';\nimport { BookListItem } from '../components';\nimport { PropTypes } from 'prop-types';\n\nclass Search extends Component {\n  state = {\n    books: [],\n    search: '',\n  };\n\n  changeShelfHandler = (book, shelf) => {\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        books: [\n          ...prevState.books.map(bookI => {\n            if (book.id === bookI.id) {\n              bookI.shelf = shelf;\n            }\n            return bookI;\n          }),\n        ],\n      };\n    });\n    this.props.updateShelf(book, shelf);\n  };\n\n  onChangeHandler = e => {\n    const { value } = e.target;\n    this.setState(\n      {\n        search: value,\n      },\n      () =>\n        this.state.search.trim().length\n          ? BooksAPI.search(this.state.search).then(books =>\n              this.updateBooksState(books),\n            )\n          : this.updateBooksState([]),\n    );\n  };\n\n  onSearchSubmit = e => {\n    e.preventDefault();\n    BooksAPI.search(this.state.search).then(books =>\n      this.updateBooksState(books),\n    );\n  };\n\n  updateBooksState = booksResult => {\n    const { books } = this.props;\n    if (booksResult instanceof Array) {\n      booksResult = booksResult.map(book => {\n        const existingBook = books.filter(bookOwn => bookOwn.id === book.id);\n        if (existingBook.length) {\n          book.shelf = existingBook[0].shelf;\n        }\n        return book;\n      });\n      this.setState({ books: booksResult });\n    } else {\n      this.setState({ books: [] });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"search-books\">\n        <div className=\"search-books-bar\">\n          <button\n            className=\"close-search\"\n            onClick={() => this.props.history.push('/')}\n          >\n            Close\n          </button>\n          <div className=\"search-books-input-wrapper\">\n            {/*\n              NOTES: The search from BooksAPI is limited to a particular set of search terms.\n              You can find these search terms here:\n              https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\n    \n              However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\n              you don't find a specific author or title. Every search is limited by search terms.\n            */}\n            <form onSubmit={this.onSearchSubmit}>\n              <DebounceInput\n                minLength={1}\n                debounceTimeout={300}\n                placeholder=\"Search by title or author\"\n                onChange={this.onChangeHandler}\n                value={this.state.search}\n                name=\"search\"\n              />\n            </form>\n          </div>\n        </div>\n        <div className=\"search-books-results\">\n          <ol className=\"books-grid\">\n            {this.state.books.map((book, key) => (\n              <BookListItem\n                book={book}\n                key={key}\n                updateShelf={this.changeShelfHandler}\n              />\n            ))}\n          </ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nSearch.propTypes = {\n  history: PropTypes.object,\n  updateShelf: PropTypes.func,\n  books: PropTypes.array,\n};\n\nexport default withRouter(Search);\n","import React, { Component } from 'react';\nimport { PropTypes } from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport * as BooksAPI from '../BooksAPI';\n\nclass BookDetails extends Component {\n  state = {\n    book: null,\n    loading: true,\n  };\n\n  componentDidMount() {\n    const { bookId } = this.props.match.params;\n    BooksAPI.get(bookId).then(book => this.setState({ book, loading: false }));\n  }\n\n  render() {\n    const { book, loading } = this.state;\n    return loading ? (\n      <div className=\"loading\" />\n    ) : (\n      <div className=\"list-books\">\n        <button\n          className=\"close-search\"\n          onClick={() => this.props.history.push('/')}\n        >\n          Close\n        </button>\n\n        <div className=\"list-books-title\">\n          <h1>{book.title}</h1>\n        </div>\n        <div className=\"book-details\">\n          <div\n            className=\"book-cover\"\n            style={{\n              width: 170,\n              height: 210,\n              backgroundImage: `url(${book.imageLinks.smallThumbnail})`,\n            }}\n          />\n          <div className=\"book-info\">\n            <div className=\"book-authors book-authors-big\">\n              <span className=\"book-info-titles\">Authors:</span>\n              {book.authors.map(\n                (author, key) => `${key > 0 ? ', ' : ''}${author}`,\n              )}\n            </div>\n            <div className=\"book-description\">\n              <span className=\"book-info-titles\">Description:</span>\n              {book.description}\n            </div>\n            {book.averageRating && (\n              <div className=\"book-rating\">\n                <span className=\"book-info-titles\">Average Rating:</span>\n                {book.averageRating} / 5\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nBookDetails.propTypes = {\n  history: PropTypes.object,\n  match: PropTypes.object,\n};\n\nexport default withRouter(BookDetails);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst PageNotFound = props => (\n  <div className=\"page-not-found\">\n    <div className=\"list-books-title\">\n      <h1>MyReads</h1>\n    </div>\n    <h2>Ooopss...</h2>\n    <h3>I think that this page was eaten by moths...=(</h3>\n    <p>Maybe we can try something else...</p>\n    <p>\n      Do you want to <Link to=\"/\">START OVER</Link>?\n    </p>\n  </div>\n);\n\nexport default PageNotFound;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport * as BooksAPI from './BooksAPI';\nimport './App.css';\n\nimport { MyReads, Search, BookDetails, PageNotFound } from './containers';\n\nclass BooksApp extends React.Component {\n  state = {\n    books: [],\n  };\n\n  componentDidMount() {\n    BooksAPI.getAll().then(books => this.setState({ books }));\n  }\n\n  changeShelfHandler = (book, shelf) => {\n    BooksAPI.update(book, shelf).then(\n      this.setState(prevState => {\n        return {\n          books: [\n            ...prevState.books.filter(bookI => book.id !== bookI.id),\n            { ...book, shelf },\n          ],\n        };\n      }),\n    );\n  };\n\n  render() {\n    const { books } = this.state;\n    return (\n      <div className=\"app\">\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <MyReads books={books} updateShelf={this.changeShelfHandler} />\n            )}\n          />\n          <Route\n            path=\"/search\"\n            render={() => (\n              <Search books={books} updateShelf={this.changeShelfHandler} />\n            )}\n          />\n          <Route path=\"/book/:bookId\" render={() => <BookDetails />} />\n          <Route component={PageNotFound} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default BooksApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}